{"version":3,"sources":["theme-context.js","components/Nav.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["themes","dark","primary","secondary","light","ThemeContext","React","createContext","theme","toggleTheme","isLight","Nav","Consumer","style","background","className","href","color","Card","width","height","margin","padding","onClick","App","props","setState","state","id","this","Provider","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEaA,EAAS,CAClBC,KAAM,CACFC,QAAS,UACTC,UAAW,WAEfC,MAAO,CACHF,QAAS,UACTC,UAAW,YAINE,EAAeC,IAAMC,cAAc,CAC5CC,MAAOR,EAAOI,MACdK,YAAa,aACbC,SAAS,ICCEC,MAdf,WAEI,OACI,kBAACN,EAAaO,SAAd,MAAwB,gBAAGJ,EAAH,EAAGA,MAAH,OACpB,yBAAKK,MAAO,CAAEC,WAAYN,EAAMN,UAC5B,yBAAKa,UAAU,eACX,uBAAGC,KAAK,IAAID,UAAU,oBAAoBF,MAAO,CAAEI,MAAOT,EAAML,YAAhE,uBCeLe,MArBf,WAEI,OACI,kBAACb,EAAaO,SAAd,MAAwB,gBAAGJ,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,QAAvB,OACpB,yBAAKK,UAAU,OAAOF,MAAO,CAAEM,MAAO,OAAQC,OAAQ,QAASC,OAAQ,YAAaJ,MAAOT,EAAML,UAAWW,WAAYN,EAAMN,UAC1H,yBAAKa,UAAU,sBAAsBF,MAAO,CAAES,QAAS,SACnD,0BAAMP,UAAU,cAAhB,gBACA,6BACA,4BAAQA,UAAW,uCAAyCL,EAAU,iBAAmB,UAAWa,QAASd,GACxGC,EAAW,OAAS,QACrB,uBAAGK,UAAU,wBACRL,EAAU,eAAiB,uBC0BzCc,E,kDAhCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDhB,YAAc,WACf,EAAKiB,UAAS,SAAAC,GAAK,MAAK,CACpBnB,MACImB,EAAMnB,QAAUR,EAAOC,KACjBD,EAAOI,MACPJ,EAAOC,KACjBS,SAAUiB,EAAMjB,aAIxB,EAAKiB,MAAQ,CACTnB,MAAOR,EAAOI,MACdM,SAAS,EACTD,YAAa,EAAKA,aAhBP,E,qDAqBf,OACI,yBAAKmB,GAAG,MAAMf,MAAQgB,KAAKF,MAAMjB,QAAU,CAACI,WAAY,WAAa,CAACA,WAAY,YAC9E,kBAACT,EAAayB,SAAd,CAAuBC,MAAOF,KAAKF,OAC/B,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GA3BFrB,IAAM0B,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.16fdb698.chunk.js","sourcesContent":["import React from 'react';\n\nexport const themes = {\n    dark: {\n        primary: '#19191B',\n        secondary: '#eeeeee',\n    },\n    light: {\n        primary: '#ffffff',\n        secondary: '#222222',\n    },\n};\n\nexport const ThemeContext = React.createContext({\n    theme: themes.light, // default value\n    toggleTheme: () => {},\n    isLight: true,\n});","import React from 'react';\nimport { ThemeContext } from '../theme-context';\n\nfunction Nav() {\n\n    return (\n        <ThemeContext.Consumer>{({ theme }) => (\n            <nav style={{ background: theme.primary }}>\n                <div className=\"nav-wrapper\">\n                    <a href=\"#\" className=\"brand-logo center\" style={{ color: theme.secondary }}>React Context</a>\n                </div>\n            </nav>\n        )}\n        </ThemeContext.Consumer>\n    )\n};\n\nexport default Nav; ","import React from 'react';\nimport { ThemeContext } from '../theme-context';\n\nfunction Card() {\n\n    return (\n        <ThemeContext.Consumer>{({ theme, toggleTheme, isLight }) => (\n            <div className=\"card\" style={{ width: \"50vw\", height: \"200px\", margin: \"15vh auto\", color: theme.secondary, background: theme.primary }}>\n                <div className=\"card-content center\" style={{ padding: \"40px\" }}>\n                    <span className=\"card-title\">Change Theme</span>\n                    <br />\n                    <button className={\"btn-large waves-effect waves-light \" + (isLight ? \"teal lighten-2\" : \"orange\")} onClick={toggleTheme}>\n                        {isLight  ? \"Dark\" : \"Light\"}\n                        <i className=\"material-icons right\">\n                            {isLight ? \"brightness_4\" : \"brightness_5\"}\n                        </i>\n                    </button>\n                </div>\n            </div>\n        )}\n        </ThemeContext.Consumer>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport { ThemeContext, themes } from './theme-context';\n\nimport Nav from './components/Nav';\nimport Card from './components/Card';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.toggleTheme = () => {\n            this.setState(state => ({\n                theme:\n                    state.theme === themes.dark\n                        ? themes.light\n                        : themes.dark,\n                isLight: !state.isLight,\n            }));\n        };\n\n        this.state = {\n            theme: themes.light,\n            isLight: true,\n            toggleTheme: this.toggleTheme,\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"app\" style={ this.state.isLight ? {background: \"#F2F2F2\"} : {background: \"#0D0D0E\"}}>\n                <ThemeContext.Provider value={this.state}>\n                    <Nav />\n                    <Card />\n                </ThemeContext.Provider>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/materialize-css/dist/css/materialize.min.css';\nimport '../node_modules/materialize-css/dist/js/materialize.min.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}